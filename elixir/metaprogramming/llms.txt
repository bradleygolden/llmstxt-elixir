# Elixir Metaprogramming Anti-patterns

> Avoid unnecessary compile-time dependencies. Prefer runtime configuration or dependency injection.

> Avoid generating excessively large amounts of code with macros. Keep generated code concise and understandable.

> Avoid unnecessary macros. Use functions when possible; macros should solve problems functions cannot.

> Understand the difference between `use` and `import`. Use `use` for injecting code and `import` for bringing functions/macros into the current scope.

## References

*   [Compile-time deps](https://hexdocs.pm/elixir/main/anti-patterns.html#compile-time-deps)
*   [Large code gen](https://hexdocs.pm/elixir/main/anti-patterns.html#large-code-gen)
*   [Unnecessary macros](https://hexdocs.pm/elixir/main/anti-patterns.html#unnecessary-macros)
*   [`use` vs `import`](https://hexdocs.pm/elixir/main/anti-patterns.html#use-vs-import)