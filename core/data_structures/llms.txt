# Elixir Data Structures and Pipelines
> Guidelines for using Elixir's core data structures like structs and maps, leveraging the Enum module, employing the pipe operator, and avoiding common pitfalls like dynamic atoms and primitive obsession.

## Resources
* [Structs](https://hexdocs.pm/elixir/structs.html): Hexdocs for Elixir structs.
* [Maps](https://hexdocs.pm/elixir/maps.html): Hexdocs for Elixir maps.
* [Enum Module](https://hexdocs.pm/elixir/Enum.html): Hexdocs for the Enum module for working with collections.
* [Kernel pipe operator |>/2](https://hexdocs.pm/elixir/Kernel.html#%7C%3E/2): Hexdocs for the pipe operator.
* [Anti-Patterns: Dynamic atoms](https://hexdocs.pm/elixir/main/anti-patterns.html#dynamic-atoms): Discussion on avoiding dynamic atom creation.
* [Anti-Patterns: Non-assertive map access](https://hexdocs.pm/elixir/main/anti-patterns.html#non-assertive-map-access): Discussion on safe map key access.
* [Anti-Patterns: Non-assertive pattern matching](https://hexdocs.pm/elixir/main/anti-patterns.html#non-assertive-pattern-matching): Discussion on robust pattern matching.
* [Anti-Patterns: Structs >= 32 fields](https://hexdocs.pm/elixir/main/anti-patterns.html#structs--32-fields): Discussion on avoiding overly large structs.
* [Anti-Patterns: Primitive obsession](https://hexdocs.pm/elixir/main/anti-patterns.html#primitive-obsession): Discussion on using dedicated types over primitives.