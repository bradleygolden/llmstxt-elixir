# Elixir Modularity and Function Design
> Guidelines for designing modular Elixir code with focused functions, clear public APIs, effective use of pattern matching, and avoiding common anti-patterns like namespace trespassing.

## Resources
* [Defining a Public API (Writing Elixir Libraries)](https://hexdocs.pm/elixir/writing-elixir-libraries.html#defining-a-public-api): Guidelines on creating clear module boundaries using public (`def`) and private (`defp`) functions.
* [Contexts (Phoenix Docs)](https://hexdocs.pm/phoenix/contexts.html): Explanation of using contexts for modular design (concept applies generally).
* [Pattern Matching (Getting Started)](https://elixir-lang.org/getting-started/pattern-matching.html): Introduction to pattern matching in Elixir, often used in function heads.
* [Anti-Patterns: Complex extractions](https://hexdocs.pm/elixir/main/anti-patterns.html#complex-extractions): Discussion on avoiding overly complex data extraction within functions.
* [Anti-Patterns: Long params](https://hexdocs.pm/elixir/main/anti-patterns.html#long-params): Discussion on functions with too many parameters.
* [Anti-Patterns: Namespace trespassing](https://hexdocs.pm/elixir/main/anti-patterns.html#namespace-trespassing): Discussion on violating module boundaries.
* [Anti-Patterns: Unrelated multi-clause func](https://hexdocs.pm/elixir/main/anti-patterns.html#unrelated-multi-clause-func): Discussion on using multiple clauses for unrelated logic.